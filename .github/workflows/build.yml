name: Build & Publish Docker Images

on:
  push:
    branches: [ main, ci-fix ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: 'bitweb/gradle-awscli'

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-matrix:
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.make.outputs.matrix }}
    steps:
      - name: Generate matrix JSON
        id: make
        shell: bash
        run: |
          # Define Gradle versions per JDK in compact arrays to avoid a huge YAML matrix
          JDK25=(
            9 9.1.0
          )
          JDK21=(
            8 8.6 8.7 8.8 8.9 8.10 8.10.1 8.10.2 8.11.0 8.11.1 8.12.0 8.12.1 8.13 8.14.0 8.14.1 8.14.2 8.14.3 9 9.0.0 9.1.0
          )
          JDK17=(
            8 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 8.10 8.10.1 8.10.2 8.11.0 8.11.1 8.12.0 8.12.1 8.13 8.14.0 8.14.1 8.14.2 8.14.3 9 9.0.0 9.1.0
          )
          JDK11=(
            8 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 8.10 8.10.1 8.10.2 8.11.0 8.11.1 8.12.0 8.12.1 8.13 8.14.0 8.14.1 8.14.2 8.14.3
          )
          JDK8=(
            8.14.3
          )

          VERSIONS=()
          for v in "${JDK25[@]}"; do VERSIONS+=("${v}-jdk25"); done
          for v in "${JDK21[@]}"; do VERSIONS+=("${v}-jdk21"); done
          for v in "${JDK17[@]}"; do VERSIONS+=("${v}-jdk17"); done
          for v in "${JDK11[@]}"; do VERSIONS+=("${v}-jdk11"); done
          for v in "${JDK8[@]}"; do VERSIONS+=("${v}-jdk8"); done

          JSON=$(printf '%s\n' "${VERSIONS[@]}" | jq -R -s -c 'split("\n")[:-1]')
          echo $JSON
          echo "matrix={\"version\":$JSON}" >> "$GITHUB_OUTPUT"

  build-and-push:
    name: ${{ matrix.version }}
    runs-on: ubuntu-latest
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    needs: [prepare-matrix]

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for arm64 emulation)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push ${{ matrix.version }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
#          push: true
          build-args: |
            VERSION=${{ matrix.version }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Slack on failure
        if: ${{ failure() && env.SLACK_WEBHOOK != '' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "${{ github.repository }} deploy to Docker Hub FAILED for ${{ matrix.version }}"
          SLACK_COLOR: "#FF0000"
